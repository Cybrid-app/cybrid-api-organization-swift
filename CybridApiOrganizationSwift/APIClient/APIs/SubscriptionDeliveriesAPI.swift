//
// SubscriptionDeliveriesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class SubscriptionDeliveriesAPI : NSObject {

    /**
     Create SubscriptionDelivery
     
     - parameter postSubscriptionDelivery: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func createSubscriptionDelivery(postSubscriptionDelivery: PostSubscriptionDelivery, apiResponseQueue: DispatchQueue = CybridApiOrganizationSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<SubscriptionDelivery, ErrorResponse>) -> Void)) -> RequestTask {
        return createSubscriptionDeliveryWithRequestBuilder(postSubscriptionDelivery: postSubscriptionDelivery).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create SubscriptionDelivery
     - POST /api/subscription_deliveries/
     - Creates a SubscriptionDelivery.  ## Subscription Delivery  Create a SubscriptionDelivery to retry the delivery of a SubscriptionEvent to a Subscription.  ## State  | State | Description | |-------|-------------| | storing | The Platform is storing the SubscriptionDelivery details in our private store | | completed | The Platform has successfully delivered the SubscriptionEvent to specified Subscription | | failing | The Platform is failing to deliver the SubscriptionDelivery,  a new attempt will be made (see `next_attempt_at`) | | failed | The Platform has failed to deliver the SubscriptionDelivery, no more attempts will be made |    Required scope: **subscription_events:execute
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postSubscriptionDelivery: (body)  
     - returns: RequestBuilder<SubscriptionDelivery> 
     */
    open class func createSubscriptionDeliveryWithRequestBuilder(postSubscriptionDelivery: PostSubscriptionDelivery) -> RequestBuilder<SubscriptionDelivery> {
        let localVariablePath = "/api/subscription_deliveries/"
        let localVariableURLString = CybridApiOrganizationSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postSubscriptionDelivery)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionDelivery>.Type = CybridApiOrganizationSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Subscription Delivery 
     
     - parameter subscriptionDeliveryGuid: (path) Identifier for the subscription delivery. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getSubscriptionDelivery(subscriptionDeliveryGuid: String, apiResponseQueue: DispatchQueue = CybridApiOrganizationSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<SubscriptionDelivery, ErrorResponse>) -> Void)) -> RequestTask {
        return getSubscriptionDeliveryWithRequestBuilder(subscriptionDeliveryGuid: subscriptionDeliveryGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Subscription Delivery 
     - GET /api/subscription_deliveries/{subscription_delivery_guid}
     - Retrieves a subscription delivery.  Required scope: **subscription_events:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter subscriptionDeliveryGuid: (path) Identifier for the subscription delivery. 
     - returns: RequestBuilder<SubscriptionDelivery> 
     */
    open class func getSubscriptionDeliveryWithRequestBuilder(subscriptionDeliveryGuid: String) -> RequestBuilder<SubscriptionDelivery> {
        var localVariablePath = "/api/subscription_deliveries/{subscription_delivery_guid}"
        let subscriptionDeliveryGuidPreEscape = "\(APIHelper.mapValueToPathItem(subscriptionDeliveryGuid))"
        let subscriptionDeliveryGuidPostEscape = subscriptionDeliveryGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{subscription_delivery_guid}", with: subscriptionDeliveryGuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiOrganizationSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionDelivery>.Type = CybridApiOrganizationSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get subscription deliveries list
     
     - parameter page: (query) The page index to retrieve. (optional)
     - parameter perPage: (query) The number of entities per page to return. (optional)
     - parameter guid: (query) Comma separated subscription_delivery_guids to list subscription deliveries for. (optional)
     - parameter subscriptionEventGuid: (query) Comma separated subscription_event_guids to list subscription deliveries for. (optional)
     - parameter subscriptionGuid: (query) Comma separated subscription_guids to list subscription deliveries for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func listSubscriptionDeliveries(page: Int? = nil, perPage: Int? = nil, guid: String? = nil, subscriptionEventGuid: String? = nil, subscriptionGuid: String? = nil, apiResponseQueue: DispatchQueue = CybridApiOrganizationSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<SubscriptionDeliveryList, ErrorResponse>) -> Void)) -> RequestTask {
        return listSubscriptionDeliveriesWithRequestBuilder(page: page, perPage: perPage, guid: guid, subscriptionEventGuid: subscriptionEventGuid, subscriptionGuid: subscriptionGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get subscription deliveries list
     - GET /api/subscription_deliveries
     - Retrieves a listing of subscription deliveries s.  Required scope: **subscription_events:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query) The page index to retrieve. (optional)
     - parameter perPage: (query) The number of entities per page to return. (optional)
     - parameter guid: (query) Comma separated subscription_delivery_guids to list subscription deliveries for. (optional)
     - parameter subscriptionEventGuid: (query) Comma separated subscription_event_guids to list subscription deliveries for. (optional)
     - parameter subscriptionGuid: (query) Comma separated subscription_guids to list subscription deliveries for. (optional)
     - returns: RequestBuilder<SubscriptionDeliveryList> 
     */
    open class func listSubscriptionDeliveriesWithRequestBuilder(page: Int? = nil, perPage: Int? = nil, guid: String? = nil, subscriptionEventGuid: String? = nil, subscriptionGuid: String? = nil) -> RequestBuilder<SubscriptionDeliveryList> {
        let localVariablePath = "/api/subscription_deliveries"
        let localVariableURLString = CybridApiOrganizationSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "guid": guid?.encodeToJSON(),
            "subscription_event_guid": subscriptionEventGuid?.encodeToJSON(),
            "subscription_guid": subscriptionGuid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionDeliveryList>.Type = CybridApiOrganizationSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
