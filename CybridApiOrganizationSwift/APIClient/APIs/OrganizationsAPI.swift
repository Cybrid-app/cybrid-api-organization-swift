//
// OrganizationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class OrganizationsAPI : NSObject {

    /**
     Get organization
     
     - parameter organizationGuid: (path) Identifier for the organization. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func getOrganization(organizationGuid: String, apiResponseQueue: DispatchQueue = CybridApiOrganizationSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Organization, ErrorResponse>) -> Void)) -> RequestTask {
        return getOrganizationWithRequestBuilder(organizationGuid: organizationGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get organization
     - GET /api/organizations/{organization_guid}
     - Retrieve an organization.  Required scope: **organizations:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter organizationGuid: (path) Identifier for the organization. 
     - returns: RequestBuilder<Organization> 
     */
    open class func getOrganizationWithRequestBuilder(organizationGuid: String) -> RequestBuilder<Organization> {
        var localVariablePath = "/api/organizations/{organization_guid}"
        let organizationGuidPreEscape = "\(APIHelper.mapValueToPathItem(organizationGuid))"
        let organizationGuidPostEscape = organizationGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organization_guid}", with: organizationGuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiOrganizationSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Organization>.Type = CybridApiOrganizationSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Patch organization
     
     - parameter organizationGuid: (path) Identifier for the organization. 
     - parameter patchOrganization: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func updateOrganization(organizationGuid: String, patchOrganization: PatchOrganization, apiResponseQueue: DispatchQueue = CybridApiOrganizationSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<Organization, ErrorResponse>) -> Void)) -> RequestTask {
        return updateOrganizationWithRequestBuilder(organizationGuid: organizationGuid, patchOrganization: patchOrganization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Patch organization
     - PATCH /api/organizations/{organization_guid}
     - Update an organization.  Required scope: **organizations:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter organizationGuid: (path) Identifier for the organization. 
     - parameter patchOrganization: (body)  
     - returns: RequestBuilder<Organization> 
     */
    open class func updateOrganizationWithRequestBuilder(organizationGuid: String, patchOrganization: PatchOrganization) -> RequestBuilder<Organization> {
        var localVariablePath = "/api/organizations/{organization_guid}"
        let organizationGuidPreEscape = "\(APIHelper.mapValueToPathItem(organizationGuid))"
        let organizationGuidPostEscape = organizationGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organization_guid}", with: organizationGuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = CybridApiOrganizationSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchOrganization)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Organization>.Type = CybridApiOrganizationSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
