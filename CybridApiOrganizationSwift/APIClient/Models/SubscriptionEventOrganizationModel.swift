//
// SubscriptionEventOrganizationModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class SubscriptionEventOrganizationModel: NSObject, Codable, JSONEncodable {

    /** Auto-generated unique identifier for the subscription event. */
    public var guid: String
    /** The bank guid for which the event is received. */
    public var bankGuid: String?
    /** The type of the subscription event. One of trade.storing, trade.pending, trade.cancelled, trade.completed, trade.settling, trade.failed, transfer.storing, transfer.pending, transfer.holding, transfer.reviewing, transfer.completed, transfer.failed, identity_verification.storing, identity_verification.pending, identity_verification.reviewing, identity_verification.waiting, identity_verification.expired, or identity_verification.completed. */
    public var eventType: String
    /** The object guid for which the event is received. */
    public var objectGuid: String
    /** The environment that the subscription event is configured for; one of sandbox or production. */
    public var environment: String
    /** The organization guid of the subscription event. */
    public var organizationGuid: String
    /** ISO8601 datetime the record was created at. */
    public var createdAt: Date
    /** ISO8601 datetime the record was last updated at. */
    public var updatedAt: Date?

    public init(guid: String, bankGuid: String? = nil, eventType: String, objectGuid: String, environment: String, organizationGuid: String, createdAt: Date, updatedAt: Date? = nil) {
        self.guid = guid
        self.bankGuid = bankGuid
        self.eventType = eventType
        self.objectGuid = objectGuid
        self.environment = environment
        self.organizationGuid = organizationGuid
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case bankGuid = "bank_guid"
        case eventType = "event_type"
        case objectGuid = "object_guid"
        case environment
        case organizationGuid = "organization_guid"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(guid, forKey: .guid)
        try container.encodeIfPresent(bankGuid, forKey: .bankGuid)
        try container.encode(eventType, forKey: .eventType)
        try container.encode(objectGuid, forKey: .objectGuid)
        try container.encode(environment, forKey: .environment)
        try container.encode(organizationGuid, forKey: .organizationGuid)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

