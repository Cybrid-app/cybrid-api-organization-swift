//
// SubscriptionDeliveryOrganizationModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc public class SubscriptionDeliveryOrganizationModel: NSObject, Codable, JSONEncodable {

    public enum StateOrganizationModel: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case storing = "storing"
        case completed = "completed"
        case failing = "failing"
        case failed = "failed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** Auto-generated unique identifier for the subscription delivery. */
    public var guid: String
    /** The response of the subscription delivery. */
    public var response: String?
    /** The subscription event guid of the subscription delivery. */
    public var subscriptionEventGuid: String
    /** The subscription guid of the subscription delivery. */
    public var subscriptionGuid: String
    /** The state of the subscription delivery. */
    public var state: StateOrganizationModel
    /** ISO8601 datetime the next attempt will be made. */
    public var nextAttemptAt: Date?
    /** The number of attempts made to deliver the event. */
    public var attemptCount: Int
    /** ISO8601 datetime the event was delivered. */
    public var completedAt: Date?
    /** ISO8601 datetime the event delivery was marked as failed. */
    public var failedAt: Date?
    /** ISO8601 datetime the record was created at. */
    public var createdAt: Date?
    /** ISO8601 datetime the record was last updated at. */
    public var updatedAt: Date?

    public init(guid: String, response: String? = nil, subscriptionEventGuid: String, subscriptionGuid: String, state: StateOrganizationModel, nextAttemptAt: Date? = nil, attemptCount: Int, completedAt: Date? = nil, failedAt: Date? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.guid = guid
        self.response = response
        self.subscriptionEventGuid = subscriptionEventGuid
        self.subscriptionGuid = subscriptionGuid
        self.state = state
        self.nextAttemptAt = nextAttemptAt
        self.attemptCount = attemptCount
        self.completedAt = completedAt
        self.failedAt = failedAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case response
        case subscriptionEventGuid = "subscription_event_guid"
        case subscriptionGuid = "subscription_guid"
        case state
        case nextAttemptAt = "next_attempt_at"
        case attemptCount = "attempt_count"
        case completedAt = "completed_at"
        case failedAt = "failed_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(guid, forKey: .guid)
        try container.encodeIfPresent(response, forKey: .response)
        try container.encode(subscriptionEventGuid, forKey: .subscriptionEventGuid)
        try container.encode(subscriptionGuid, forKey: .subscriptionGuid)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(nextAttemptAt, forKey: .nextAttemptAt)
        try container.encode(attemptCount, forKey: .attemptCount)
        try container.encodeIfPresent(completedAt, forKey: .completedAt)
        try container.encodeIfPresent(failedAt, forKey: .failedAt)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

